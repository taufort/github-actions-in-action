name: base-infrastructure

on:
  push:
    branches:
      - main
  pull_request:

defaults:
  run:
    shell: bash

jobs:
  terraform:
    defaults:
      run:
        working-directory: base-infrastructure/.cloud/terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v2
      - name: Setup Terraform
        id: setup
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.7
          terraform_wrapper: false
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -recursive
      - name: Terraform init without backend
        id: init-without-backend
        run: terraform init -backend=false
      - name: Terraform validate
        id: validate
        run: terraform validate
      - name: Terraform init
        id: init
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Terraform plan
        id: plan
        run: terraform plan -no-color -out=tfplan.out
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Terraform apply
        id: apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -input=false tfplan.out
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        continue-on-error: true
      - name: Create a new GitHub issue if the apply failed
        id: create-github-issue-if-apply-failed
        uses: actions/github-script@v3
        if: github.ref == 'refs/heads/main' && steps.apply.outcome == 'failure'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform plan which provoked a Terraform apply failure üìñ \`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>\n
            \`\`\`${process.env.PLAN}\`\`\`
            </details>\n
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.create({
              title: 'Terraform apply failed on main branch',
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output,
              labels: ['Triage', 'Bug']
            })
      - name: Terraform apply status
        id: apply-status
        if: github.ref == 'refs/heads/main' && steps.apply.outcome == 'failure'
        run: exit 1